{"version":3,"sources":["logo.png","routes/Home/Home.js","routes/Quizzes/Quiz1.js","routes/Quizzes/Quiz2.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","id","href","title","React","Component","Quiz1","Quiz2","App","src","logo","alt","activeClassName","exact","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,kC,mPCsB5BC,G,6KAhBT,OACE,yBAAKC,UAAU,oBACb,yBAAKC,GAAG,SACN,wBAAIA,GAAG,YAAP,QACO,iCADP,aAGA,wBAAIA,GAAG,cAAP,+IAC8I,uBAAGC,KAAK,sCAAsCC,MAAM,qBAApD,QAD9I,KAEK,mC,GAVEC,IAAMC,YCWVC,G,6KAVX,OACE,yBAAKN,UAAU,oBACb,yBAAKA,UAAU,WACb,4C,GALUI,IAAMC,YCYXE,E,uKAVX,OACE,yBAAKP,UAAU,oBACb,yBAAKA,UAAU,WACb,4C,GALUI,IAAMC,WCoDXG,G,6KAxCX,OACE,kBAAC,IAAD,KACE,6BACE,yBAAKP,GAAG,UACJ,yBAAKA,GAAG,UACJ,yBAAKA,GAAG,OAAOQ,IAAKC,IAAMC,IAAI,yBAC9B,wBAAIV,GAAG,eAAP,yCAEJ,yBAAKA,GAAG,UACJ,yBAAKA,GAAG,iBACJ,yBAAKA,GAAG,iBACN,6BACE,kBAAC,IAAD,CAASW,gBAAgB,aAAaC,OAAK,EAACC,GAAG,WAC7C,4BAAQd,UAAU,eAAeC,GAAG,cAApC,SAEF,kBAAC,IAAD,CAASW,gBAAgB,aAAaC,OAAK,EAACC,GAAG,gBAC7C,4BAAQd,UAAU,eAAeC,GAAG,eAApC,WAEF,kBAAC,IAAD,CAASW,gBAAgB,aAAaC,OAAK,EAACC,GAAG,gBAC7C,4BAAQd,UAAU,eAAeC,GAAG,eAApC,gBAQlB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOc,KAAK,eAAeC,UAAWV,IACtC,kBAAC,IAAD,CAAOS,KAAK,eAAeC,UAAWT,IACtC,kBAAC,IAAD,CAAOQ,KAAK,UAAUC,UAAWjB,MAIrC,yBAAKE,GAAG,gB,GApCEG,IAAMC,YCDJY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b067a296.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.71ab6a2e.png\";","import React from 'react';\r\nimport './Home.css';\r\n\r\n\r\nclass Home extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className=\"contentContainer\">\r\n          <div id=\"intro\">\r\n            <h1 id=\"question\">\r\n              What <i>is</i> a rebus?\r\n            </h1>\r\n            <h4 id=\"definition\">\r\n              A rebus is a puzzle device which combines the use of illustrated pictures with individual letters to depict words and/or phrases. Read more <a href=\"https://en.wikipedia.org/wiki/Rebus\" title=\"Rebus - Wikipedia\">here</a>.\r\n            </h4><br/> \r\n                      \r\n          </div>\r\n        </div>\r\n      );\r\n    };\r\n  };\r\n\r\nexport default Home;","import React from 'react';\r\nimport './Quiz.css';\r\n\r\nclass Quiz1 extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"contentContainer\">\r\n        <div className=\"puzzles\">\r\n          <h1>Quiz 1</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default Quiz1;","import React from 'react';\r\nimport './Quiz.css'\r\n\r\nclass Quiz2 extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"contentContainer\">\r\n        <div className=\"puzzles\">\r\n          <h1>Quiz 2</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default Quiz2;","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  NavLink\r\n} from \"react-router-dom\";\r\nimport logo from './logo.png';\r\nimport Home from './routes/Home/Home';\r\nimport Quiz1 from './routes/Quizzes/Quiz1';\r\nimport Quiz2 from './routes/Quizzes/Quiz2';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <div id=\"header\">\r\n              <div id=\"banner\">\r\n                  <img id=\"logo\" src={logo} alt=\"'Rebus Puzzles' logo\"/>\r\n                  <h3 id=\"tryYourHand\">Try your hand at some rebus puzzles.</h3>\r\n              </div>\r\n              <div id=\"navBar\">\r\n                  <div id=\"navBarContent\">\r\n                      <div id=\"navBarButtons\">\r\n                        <nav>\r\n                          <NavLink activeClassName=\"activeLink\" exact to=\"/rebus/\">\r\n                            <button className=\"navBarButton\" id=\"homeButton\">Home</button>\r\n                          </NavLink>\r\n                          <NavLink activeClassName=\"activeLink\" exact to=\"/rebus/quiz1\">\r\n                            <button className=\"navBarButton\" id=\"quiz1Button\">Quiz 1</button>\r\n                          </NavLink>\r\n                          <NavLink activeClassName=\"activeLink\" exact to=\"/rebus/quiz2\">\r\n                            <button className=\"navBarButton\" id=\"quiz2Button\">Quiz 2</button>\r\n                          </NavLink>\r\n                        </nav>\r\n                      </div>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n\r\n          <Switch>\r\n            <Route path=\"/rebus/quiz1\" component={Quiz1} />\r\n            <Route path=\"/rebus/quiz2\" component={Quiz2} />\r\n            <Route path=\"/rebus/\" component={Home} />\r\n          </Switch>\r\n        </div>\r\n\r\n        <div id=\"footer\"></div>\r\n      </Router>\r\n    );\r\n  };\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}